import asyncio
import json
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import (
    Message, 
    CallbackQuery, 
    ChatMemberOwner, 
    ChatMemberAdministrator,
    ChatMember
)
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from config import ADMIN_IDS, LOG_CHAT_ID
import logging

logger = logging.getLogger(__name__)
router = Router()

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏
WARNINGS_FILE = 'data/warnings.json'

class AdminMenu:
    def __init__(self):
        self.muted_users = {}
        self.banned_users = {}
        self.warnings = self.load_warnings()

    def load_warnings(self):
        try:
            with open(WARNINGS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            return {"chats": {}}

    def save_warnings(self):
        with open(WARNINGS_FILE, 'w', encoding='utf-8') as f:
            json.dump(self.warnings, f, indent=4, ensure_ascii=False)

    def get_user_warnings(self, chat_id: str, user_id: str) -> int:
        chat_id, user_id = str(chat_id), str(user_id)
        return self.warnings["chats"].get(chat_id, {}).get(user_id, 0)

    def add_warning(self, chat_id: str, user_id: str) -> int:
        chat_id, user_id = str(chat_id), str(user_id)
        if chat_id not in self.warnings["chats"]:
            self.warnings["chats"][chat_id] = {}
        if user_id not in self.warnings["chats"][chat_id]:
            self.warnings["chats"][chat_id][user_id] = 0
        self.warnings["chats"][chat_id][user_id] += 1
        self.save_warnings()
        return self.warnings["chats"][chat_id][user_id]

admin_menu = AdminMenu()

def get_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    kb = InlineKeyboardBuilder()
    kb.button(text="–ú—É—Ç", callback_data="admin_mute")
    kb.button(text="–†–∞–∑–º—É—Ç", callback_data="admin_unmute")
    kb.button(text="–ë–∞–Ω", callback_data="admin_ban")
    kb.button(text="–†–∞–∑–±–∞–Ω", callback_data="admin_unban")
    kb.button(text="–í–∞—Ä–Ω", callback_data="admin_warn")
    kb.button(text="–°–ø–∏—Å–æ–∫ –≤–∞—Ä–Ω–æ–≤", callback_data="admin_warn_stats")
    kb.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    return kb.as_markup()

@router.message(Command("admin_menu"))
async def show_admin_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    logger.info(f"ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}, –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.username}")
    
    if message.from_user.id not in ADMIN_IDS:
        await message.reply(f"–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! –í–∞—à ID: {message.from_user.id}")
        return
    
    await message.reply(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

async def get_chat_members_keyboard(chat_id: int, bot, page: int = 0, action: str = ""):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞"""
    kb = InlineKeyboardBuilder()
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
        chat = await bot.get_chat(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        members = []
        count = await bot.get_chat_member_count(chat_id)
        
        # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ—Ä—Ü–∏—è–º–∏
        for offset in range(0, min(count, 50), 10):  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ 50 —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏
            chunk = await bot.get_chat_administrators(chat_id)
            for member in chunk:
                if not isinstance(member.status, (ChatMemberOwner, ChatMemberAdministrator)):
                    members.append(member)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        page_size = 5
        start_idx = page * page_size
        page_members = members[start_idx:start_idx + page_size]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        for member in page_members:
            user = member.user
            name = f"{user.first_name}"
            if user.last_name:
                name += f" {user.last_name}"
            if len(name) > 20:
                name = name[:20] + "..."
            kb.button(
                text=name,
                callback_data=f"select_user_{action}_{user.id}"
            )
        
        kb.adjust(1)  # –ü–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Ä—è–¥
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
        row = []
        if page > 0:
            row.append(InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data=f"page_{action}_{page-1}"
            ))
        if len(members) > (page + 1) * page_size:
            row.append(InlineKeyboardButton(
                text="–í–ø–µ—Ä–µ–¥ ‚ñ∂Ô∏è",
                callback_data=f"page_{action}_{page+1}"
            ))
        if row:
            kb.row(*row)
        
        # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        kb.row(InlineKeyboardButton(text="üîô –í –º–µ–Ω—é", callback_data="admin_back"))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
        kb.button(text="üîô –í –º–µ–Ω—é", callback_data="admin_back")
    
    return kb.as_markup()

@router.callback_query(F.data.startswith("admin_"))
async def handle_admin_callback(callback: CallbackQuery):
    if callback.from_user.id not in ADMIN_IDS:
        await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", show_alert=True)
        return

    action = callback.data.split("_")[1]
    
    if action == "mute":
        keyboard = await get_chat_members_keyboard(
            callback.message.chat.id,
            callback.bot,
            action="mute"
        )
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –º—É—Ç–∞:",
            reply_markup=keyboard
        )
    elif action == "ban":
        keyboard = await get_chat_members_keyboard(
            callback.message.chat.id,
            callback.bot,
            action="ban"
        )
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞:",
            reply_markup=keyboard
        )
    elif action == "warn":
        kb = InlineKeyboardBuilder()
        kb.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_back")
        await callback.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:",
            reply_markup=kb.as_markup()
        )
    elif action == "back":
        await callback.message.edit_text(
            "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=get_admin_keyboard()
        )

@router.callback_query(F.data.startswith("select_user_"))
async def handle_user_selection(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if callback.from_user.id not in ADMIN_IDS:
        return
    
    _, action, user_id = callback.data.split("_")[1:]
    user_id = int(user_id)
    
    kb = InlineKeyboardBuilder()
    kb.button(text="üîô –ù–∞–∑–∞–¥", callback_data=f"admin_{action}")
    
    if action == "mute":
        kb.button(text="5 –º–∏–Ω—É—Ç", callback_data=f"mute_{user_id}_5")
        kb.button(text="30 –º–∏–Ω—É—Ç", callback_data=f"mute_{user_id}_30")
        kb.button(text="1 —á–∞—Å", callback_data=f"mute_{user_id}_60")
        kb.button(text="1 –¥–µ–Ω—å", callback_data=f"mute_{user_id}_1440")
        kb.adjust(2)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –º—É—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.as_markup()
        )
    elif action == "ban":
        kb.button(text="1 —á–∞—Å", callback_data=f"ban_{user_id}_60")
        kb.button(text="1 –¥–µ–Ω—å", callback_data=f"ban_{user_id}_1440")
        kb.button(text="1 –Ω–µ–¥–µ–ª—è", callback_data=f"ban_{user_id}_10080")
        kb.button(text="–ù–∞–≤—Å–µ–≥–¥–∞", callback_data=f"ban_{user_id}_0")
        kb.adjust(2)
        await callback.message.edit_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
            reply_markup=kb.as_markup()
        )

@router.callback_query(F.data.startswith(("mute_", "ban_")))
async def handle_action_duration(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è"""
    if callback.from_user.id not in ADMIN_IDS:
        return
    
    action, user_id, duration = callback.data.split("_")
    user_id = int(user_id)
    duration = int(duration)
    
    if action == "mute":
        await mute_user(callback.message.chat.id, user_id, duration, callback.message)
    elif action == "ban":
        await ban_user(callback.message.chat.id, user_id, duration, callback.message)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        "–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
        reply_markup=get_admin_keyboard()
    )

@router.callback_query(F.data.startswith("page_"))
async def handle_page_navigation(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
    if callback.from_user.id not in ADMIN_IDS:
        return
    
    _, action, page = callback.data.split("_")
    page = int(page)
    
    keyboard = await get_chat_members_keyboard(
        callback.message.chat.id,
        callback.bot,
        page,
        action
    )
    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è {action}:",
        reply_markup=keyboard
    )

@router.message()
async def handle_admin_actions(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–¥–º–∏–Ω–∞ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫"""
    if message.from_user.id not in ADMIN_IDS:
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–º–∞–Ω–¥–æ–π
    reply_to = message.reply_to_message
    if not reply_to or not hasattr(reply_to, 'text'):
        return

    try:
        if "–≤—Ä–µ–º—è –º—É—Ç–∞" in reply_to.text:
            user_id, duration = map(int, message.text.split())
            await mute_user(message.chat.id, user_id, duration, message)
        
        elif "–≤—Ä–µ–º—è –±–∞–Ω–∞" in reply_to.text:
            user_id, duration = map(int, message.text.split())
            await ban_user(message.chat.id, user_id, duration, message)
        
        elif "–¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è" in reply_to.text:
            user_id = int(message.text)
            warnings = admin_menu.add_warning(message.chat.id, user_id)
            await message.reply(
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id} –≤—ã–¥–∞–Ω–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ (–≤—Å–µ–≥–æ: {warnings})"
            )
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º—É—Ç –ø—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –ø–æ—Ä–æ–≥–∞ –≤–∞—Ä–Ω–æ–≤
            if warnings >= 3:
                await mute_user(message.chat.id, user_id, 60, message)  # –ú—É—Ç –Ω–∞ —á–∞—Å
                
    except ValueError: 
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–¥–º–∏–Ω-–¥–µ–π—Å—Ç–≤–∏—è: {e}")
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–µ–π—Å—Ç–≤–∏—è.")

async def mute_user(chat_id: int, user_id: int, duration: int, message: Message):
    """–ú—É—Ç–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        until_date = datetime.now() + timedelta(minutes=duration)
        await message.bot.restrict_chat_member(
            chat_id, user_id,
            until_date=until_date,
            permissions={"can_send_messages": False}
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—É—Ç–µ
        admin_menu.muted_users[user_id] = {
            "until": until_date,
            "chat_id": chat_id
        }
        
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω—É—Ç.")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä —Ä–∞–∑–º—É—Ç–∞
        asyncio.create_task(auto_unmute(chat_id, user_id, duration, message.bot))
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –º—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def auto_unmute(chat_id: int, user_id: int, duration: int, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—É—á–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    await asyncio.sleep(duration * 60)
    try:
        await bot.restrict_chat_member(
            chat_id, user_id,
            permissions={"can_send_messages": True}
        )
        admin_menu.muted_users.pop(user_id, None)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–º—É—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–º—É—Ç–µ: {e}")

async def ban_user(chat_id: int, user_id: int, duration: int, message: Message):
    """–ë–∞–Ω–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        if duration > 0:
            until_date = datetime.now() + timedelta(minutes=duration)
            admin_menu.banned_users[user_id] = {
                "until": until_date,
                "chat_id": chat_id
            }
            asyncio.create_task(auto_unban(chat_id, user_id, duration, message.bot))
        else:
            until_date = None  # –ü–µ—Ä–º–∞–Ω–µ–Ω—Ç–Ω—ã–π –±–∞–Ω
            
        await message.bot.ban_chat_member(chat_id, user_id, until_date=until_date)
        ban_type = "–≤—Ä–µ–º–µ–Ω–Ω–æ" if duration > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
        await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω {ban_type}.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

async def auto_unban(chat_id: int, user_id: int, duration: int, bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    await asyncio.sleep(duration * 60)
    try:
        await bot.unban_chat_member(chat_id, user_id)
        admin_menu.banned_users.pop(user_id, None)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º —Ä–∞–∑–±–∞–Ω–µ: {e}")

def register_admin_handlers(dp):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é"""
    dp.include_router(router)
