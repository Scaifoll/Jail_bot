from aiogram import types, Dispatcher, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

GRID_SIZE = 5
MAX_SHIPS = 3
CELL_EMPTY = "‚¨ú"
CELL_SHIP = "üö¢"
CELL_HIT = "üí•"
CELL_MISS = "‚ùå"

class BattleshipStates(StatesGroup):
    waiting_for_opponent = State()
    placing_ships = State()
    in_battle = State()

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏–≥—Ä—ã
games = {}

def get_keyboard(game, player_id, reveal_ships=False):
    """
    –°—Ç—Ä–æ–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–≥—Ä–æ–∫–∞.
    –ï—Å–ª–∏ reveal_ships=True ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏.
    –ï—Å–ª–∏ False ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –≤—ã—Å—Ç—Ä–µ–ª—ã –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É (—Å–∫—Ä—ã–≤–∞—è –∫–æ—Ä–∞–±–ª–∏).
    """
    builder = InlineKeyboardBuilder()
    player_data = game['players'][player_id]

    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            if reveal_ships:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∞–±–ª–∏ —Å–≤–æ–µ–≥–æ –ø–æ–ª—è
                if (row, col) in player_data['ships']:
                    emoji = CELL_SHIP
                else:
                    emoji = CELL_EMPTY
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –∫—É–¥–∞ —Å—Ç—Ä–µ–ª—è–ª –ø–æ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫—É
                cell = player_data['enemy_shots'].get((row, col))
                if cell == 'hit':
                    emoji = CELL_HIT
                elif cell == 'miss':
                    emoji = CELL_MISS
                else:
                    emoji = CELL_EMPTY
            builder.button(text=emoji, callback_data=f"bs:{game['id']}:{player_id}:{row}:{col}")
        builder.adjust(GRID_SIZE)
    return builder.as_markup()

async def start_battleship(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∏–≥—Ä—É —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º id = user_id (–ø–æ–∫–∞ —á—Ç–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    game_id = str(user_id)
    if game_id in games:
        await message.answer("–ò–≥—Ä–∞ —É–∂–µ —Å–æ–∑–¥–∞–Ω–∞, –∂–¥—ë–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞ /join")
        return

    games[game_id] = {
        'id': game_id,
        'players': {
            user_id: {
                'ships': set(),
                'enemy_shots': {},  # –ì–¥–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫ —Å—Ç—Ä–µ–ª—è–ª
                'own_message_id': None,
                'enemy_message_id': None,
                'ready': False,
                'turn': False,
            }
        },
        'state': 'waiting_for_opponent',
        'turn_player': None,
        'waiting_player': None,
    }

    await state.set_state(BattleshipStates.waiting_for_opponent)
    await message.answer("–ò–≥—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞! –ñ–¥–µ–º –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞, —á—Ç–æ–±—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –æ—Ç–ø—Ä–∞–≤—å /join_game")

def get_keyboard_for_enemy(game, player_id):
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –ø–æ–ª–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É–¥–∞ —Å—Ç—Ä–µ–ª—è–ª –∏–≥—Ä–æ–∫ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–ø–æ–ø–∞–¥–∞–Ω–∏–µ/–ø—Ä–æ–º–∞—Ö),
    –Ω–æ –ù–ï –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π.
    """
    builder = InlineKeyboardBuilder()
    player_data = game['players'][player_id]
    opponent_id = [pid for pid in game['players'] if pid != player_id][0]
    opponent_data = game['players'][opponent_id]

    for row in range(GRID_SIZE):
        for col in range(GRID_SIZE):
            pos = (row, col)
            shot_result = player_data['enemy_shots'].get(pos)
            if shot_result == 'hit':
                emoji = CELL_HIT
            elif shot_result == 'miss':
                emoji = CELL_MISS
            else:
                emoji = CELL_EMPTY
            builder.button(text=emoji, callback_data=f"bs:{game['id']}:{player_id}:{row}:{col}")
        builder.adjust(GRID_SIZE)
    return builder.as_markup()


async def join_game(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    # –ò—â–µ–º –∏–≥—Ä—É –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ–ø–ø–æ–Ω–µ–Ω—Ç–∞
    game_to_join = None
    for game in games.values():
        if game['state'] == 'waiting_for_opponent' and len(game['players']) == 1:
            game_to_join = game
            break

    if not game_to_join:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∏–≥—Ä –¥–ª—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è. –°–æ–∑–¥–∞–π—Ç–µ –∏–≥—Ä—É –∫–æ–º–∞–Ω–¥–æ–π /start_game")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    game_to_join['players'][user_id] = {
        'ships': set(),
        'enemy_shots': {},
        'own_message_id': None,
        'enemy_message_id': None,
        'ready': False,
        'turn': False,
    }

    game_to_join['state'] = 'placing_ships'
    game_to_join['turn_player'] = list(game_to_join['players'].keys())[0]  # –ö—Ç–æ –ø–µ—Ä–≤—ã–π —Ö–æ–¥–∏—Ç ‚Äî –ø–µ—Ä–≤—ã–π –∏–≥—Ä–æ–∫

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ–±–æ–∏–º –∏–≥—Ä–æ–∫–∞–º
    for pid in game_to_join['players']:
        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–º –ø–æ–ª–µ–º (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏)
        text_own = f"üö¢ –ò–≥—Ä–æ–∫ {pid}, —Ä–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ {MAX_SHIPS} –∫–æ—Ä–∞–±–ª—è –Ω–∞ –ø–æ–ª–µ {GRID_SIZE}x{GRID_SIZE}"
        keyboard_own = get_keyboard(game_to_join, pid, reveal_ships=True)
        sent_own = await message.bot.send_message(pid, text_own, reply_markup=keyboard_own)

        # –°–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–ª–µ–º –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞ (–∫—É–¥–∞ —Å—Ç—Ä–µ–ª—è–ª –∏–≥—Ä–æ–∫)
        text_enemy = "–ü–æ–ª–µ –ø—Ä–æ—Ç–∏–≤–Ω–∏–∫–∞"
        keyboard_enemy = get_keyboard_for_enemy(game_to_join, pid)
        sent_enemy = await message.bot.send_message(pid, text_enemy, reply_markup=keyboard_enemy)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º id —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        game_to_join['players'][pid]['own_message_id'] = sent_own.message_id
        game_to_join['players'][pid]['enemy_message_id'] = sent_enemy.message_id

    await state.clear()
    await message.answer("–í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ –∏–≥—Ä–µ! –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ –∫–æ—Ä–∞–±–ª–∏.")

async def cell_pressed(callback: types.CallbackQuery):
    data = callback.data.split(":")
    if len(data) != 5:
        return await callback.answer()

    _, game_id, player_id_str, row_str, col_str = data
    player_id = int(player_id_str)
    row = int(row_str)
    col = int(col_str)

    user_id = callback.from_user.id

    if game_id not in games:
        return await callback.answer("–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    game = games[game_id]

    if user_id not in game['players']:
        return await callback.answer("–í—ã –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫ —ç—Ç–æ–π –∏–≥—Ä—ã")

    player = game['players'][user_id]
    opponent_id = [pid for pid in game['players'] if pid != user_id][0]
    opponent = game['players'][opponent_id]

    if game['state'] == 'placing_ships':
        # –†–∞–∑–º–µ—â–µ–Ω–∏–µ –∫–æ—Ä–∞–±–ª–µ–π –∏–≥—Ä–æ–∫–æ–º
        if user_id != player_id:
            return await callback.answer("–≠—Ç–æ –Ω–µ –≤–∞—à–µ –ø–æ–ª–µ!")

        pos = (row, col)
        if pos in player['ships']:
            player['ships'].remove(pos)
        elif len(player['ships']) < MAX_SHIPS:
            player['ships'].add(pos)
        else:
            return await callback.answer("–ú–∞–∫—Å–∏–º—É–º –∫–æ—Ä–∞–±–ª–µ–π —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ—Ä–∞–±–ª—è–º–∏
        text = f"üö¢ –†–∞—Å—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ—Ä–∞–±–ª–∏\n–û—Å—Ç–∞–ª–æ—Å—å: {MAX_SHIPS - len(player['ships'])}"
        if len(player['ships']) == MAX_SHIPS:
            player['ready'] = True
            text = "‚úÖ –í—Å–µ –∫–æ—Ä–∞–±–ª–∏ —Ä–∞–∑–º–µ—â–µ–Ω—ã, –∂–¥—ë–º —Å–æ–ø–µ—Ä–Ω–∏–∫–∞..."

        keyboard = get_keyboard(game, user_id, reveal_ships=True)
        await callback.message.edit_text(text, reply_markup=keyboard)
        await callback.answer()

        # –ï—Å–ª–∏ –æ–±–∞ –≥–æ—Ç–æ–≤—ã ‚Äî –Ω–∞—á–∏–Ω–∞–µ–º –∏–≥—Ä—É
        if all(p['ready'] for p in game['players'].values()):
            game['state'] = 'in_battle'
            game['players'][game['turn_player']]['turn'] = True

            for pid in game['players']:
                text = f"üî• –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å! {'–í–∞—à —Ö–æ–¥' if pid == game['turn_player'] else '–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞'}"
                keyboard = get_keyboard(game, pid, reveal_ships=False)
                await callback.bot.edit_message_text(
                    text=text,
                    chat_id=pid,
                    message_id=game['players'][pid]['message_id'],
                    reply_markup=keyboard
                )

    elif game['state'] == 'in_battle':
        if user_id != game['turn_player']:
            return await callback.answer("–°–µ–π—á–∞—Å –Ω–µ –≤–∞—à —Ö–æ–¥!")

        pos = (row, col)
        if pos in opponent['enemy_shots']:
            return await callback.answer("–í—ã —É–∂–µ —Å—Ç—Ä–µ–ª—è–ª–∏ —Å—é–¥–∞")

        hit = pos in opponent['ships']
        opponent['enemy_shots'][pos] = 'hit' if hit else 'miss'

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–±–µ–¥—ã
        hits = [p for p, res in opponent['enemy_shots'].items() if res == 'hit']
        if set(hits) >= opponent['ships']:
            # –ü–æ–±–µ–¥–∞!
            text_win = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã –≤—ã–∏–≥—Ä–∞–ª–∏!"
            text_lose = "üòû –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."

            for pid in game['players']:
                msg_text = text_win if pid == user_id else text_lose
                await callback.bot.edit_message_text(
                    text=msg_text,
                    chat_id=pid,
                    message_id=game['players'][pid]['message_id'],
                    reply_markup=None
                )
            games.pop(game_id)  # –£–¥–∞–ª—è–µ–º –∏–≥—Ä—É
            return await callback.answer("–í—ã –ø–æ–±–µ–¥–∏–ª–∏!")

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ö–æ–¥
        game['turn_player'] = opponent_id
        for pid in game['players']:
            text = f"üî• {'–í–∞—à —Ö–æ–¥' if pid == game['turn_player'] else '–•–æ–¥ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞'}"
            keyboard = get_keyboard(game, pid, reveal_ships=False)
            await callback.bot.edit_message_text(
                text=text,
                chat_id=pid,
                message_id=game['players'][pid]['message_id'],
                reply_markup=keyboard
            )

        await callback.answer("üí• –ü–æ–ø–∞–¥–∞–Ω–∏–µ!" if hit else "‚ùå –ú–∏–º–æ!")

async def cancel_game(message: types.Message):
    user_id = message.from_user.id
    to_delete = []
    for gid, game in games.items():
        if user_id in game['players']:
            to_delete.append(gid)
    for gid in to_delete:
        games.pop(gid)
    await message.answer("–í—Å–µ –≤–∞—à–∏ –∏–≥—Ä—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.")

def register_game_handler(dp: Dispatcher):
    dp.message.register(start_battleship, Command("start_game"))
    dp.message.register(join_game, Command("join_game"))
    dp.message.register(cancel_game, Command("cancel_game"))
    dp.callback_query.register(cell_pressed, F.data.startswith("bs:"))
